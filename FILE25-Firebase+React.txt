CHAPTER-1 : WHAT IS A FIREBASE?
    - Firebase is a set of backend cloud computing services and application development platforms provided by Google.
    
    - It hosts databases, services, authentication, and integration for a variety of applications, including Android, iOS, JavaScript, Node.js, Java, Unity, PHP, and C++. 
    
    - Discover Firebase, Google's mobile and web app development platform that helps developers build apps and games that users will love.


CHAPTER-2 : STEPS FOR TO CREATE A FIREBASE SERVICE.
    STEP-1 :
        - Go to Firebase official website and login with your google account.

    STEP-2 :
        - Click on Go to Console button. It is comes under navigation bar(Right Side)

    STEP-3 : 
        - When you are into the firebase console page you can click on CREATE A PROJECT button.

    STEP-4 :
        - Enter your project name ("youtube-app" => This is my project name) and click on the continue button and then disabled google analytic option then click to CREATE PROJECT button. 
        
        - After that it will take a time to create a new project and then click on CONTINUE button to continue.

    STEP-5 :
        - After that you will get a new project profile page.

    STEP-6 :
        - In your firebase project profile page, at the right side of your menu you will get a so many options.(BUILD, RUN, ANALYTICS)

    STEP-7 :
        - Click on the BUILD option and you will get a so many options.
            -> AUTHENTICATION(This is a Service) is available, and you can use it to configure of the authentication like google and github. By using this authentication you can configure the users.
            
            -> FIRE STORE DATABASE(This is a Service) is available, and this is a document based database. This is a popular database. We are using this database in our project.
            
            -> It will maintain the database in form of document structure.

            -> REAL TIME DATABASE(This is a Service) is available, and it looks like a fire store database. If you are update any data here, our app will be updated automatically.
            
            -> It will maintain the database in form of tree structure.

            -> STORE(This is a Service) is available, and it keeps the data like files, photos and videos which is uploaded by the user. It's like a cloud storage service.

            -> HOSTING(This is a Service) is available, and it is used for to host your application.

            -> FUNCTIONS, MACHINE LEARNING(This is a Service) is available, and these are the basic overview of firebase.


CHAPTER-3 : HOW TO SET UP A REACT AND FIREBASE PROJECT?
    STEP 1: 
        - Create a new REACT application.
    
    STEP 2: 
        - Go to the FIREBASE PROJECT profile page, in that page you will see the title like "Get started by adding Firebase to your app"
    
    STEP 3:
        - Below the title of your FIREBASE PROJECT profile page, you will see the ICONS like iOS, ANDROID and WEB.
    
    STEP 4: 
        - Clicking on the WEB icon, you will get a page which helps to connect with the web app.
    
    STEP 5: 
        - In the connection(Add Firebase to your web App) page, you will get a text box for to register your web app and my application name is "youtube-web-app" then click on the REGISTER APP" button.

    STEP 6: 
        - You will have to registered firebase so you will get a cmd NPM I FIREBASE.

    STEP 7: 
        - Go back to the react app and install the cmd i.e NPM I FIREBASE

    STEP 8: 
        - After installing the cmd then, initialize Firebase and begin using the SDKs for the products that you'd like to use.

            -> So that create firebase.js file inside the SRC react app and copy the firebase SKD form the firebase connection page and paste it into the firebase.js file.

            -> This FIREBASE SDK helps you connect to the react app.

            -> After that click on the CONTINUE TO THE CONSOLE button.

            -> After click on the CONTINUE TO THE CONSOLE button you will get FIREBASE project profile page. 

            -> In that page, Below the firebase project name you will get 1 app option. It means one react application connected to the firebase project.

            -> If you click on the 1 app option you will get the web app name i.e "youtube-web-app".

    STEP 9:
        - Verify the connection between the firebase project and the react app.
            
            -> Click on the REAL TIME DATABASE service option (It comes under BUILD left side menu in your firebase project profile page).
            
            -> Now, you are into the REAL TIME DATABASE service page and click on CREATE DATABASE button.
            
            -> You will get a dialog box with dropdown. In that dropdown select real time database location i.e UNITED STATES(us-central1). Default option and click on NEXT button.
            
            -> After that you will get a security rules option in the same dialog box.
            
            -> Click on the second radio button i.e for START IN TEST MODE because in that mode you will get a read and write capability. Where in the first options you won't and click on the ENABLE button.
            
            -> This helps you to create a real time database and you will get DATABASE URL also.

    STEP 10: 
        - You can copy the DATABASE URL from the console box and go to firebase.js file.

    STEP 11: 
        - In this file please update firebaseConfig object with databaseURL key and save it. So here I added firebase DATABASE url in the firebase.js file.

    STEP 12: 
        - Go to App.js file and 
            import { getDatabase } from "firebase/database";
            import { app } from "./firebase";

    STEP 13: 
        - Updated firebase.js file code as shown in below

            // Import the functions you need from the SDKs you need
            import { initializeApp } from "firebase/app";
            // TODO: Add SDKs for Firebase products that you want to use
            // https://firebase.google.com/docs/web/setup#available-libraries

            // Your web app's Firebase configuration
            const firebaseConfig = {
                apiKey: "AIzaSyAzACZiZRKIUkrQ4zfcXf-hxyU5PjWxoQY",
                authDomain: "app-d8c4e.firebaseapp.com",
                projectId: "app-d8c4e",
                storageBucket: "app-d8c4e.appspot.com",
                messagingSenderId: "50991172825",
                appId: "1:50991172825:web:b19c684cf3b91518e4c2c8",
                databaseURL: "https://app-d8c4e-default-rtdb.firebaseio.com",
            };

            // Initialize Firebase
            export const app = initializeApp(firebaseConfig);

    STEP 14: 
        - Updated App.js file code as shown in the below

            import { getDatabase, ref, set } from "firebase/database";
            import { app } from "./firebase";
            import "./App.css";

            const db = getDatabase(app);
            function App() {
            // TO STORE A DATA INTO THE DATABASE
            const putData = () => {
                set(ref(db, "users/javed"), {
                id: 1,
                name: "Javed Hosamani",
                age: 21,
                });
            };

            return (
                <div className="App">
                    <h1>Firebase React App</h1>
                    <button onClick={putData}>Put Data</button>
                </div>
            );
            }

            export default App;


CHAPTER-4 : AUTHENTICATION IN FIREBASE OR FIREBASE REACT AUTHENTICATION (CREATING AN ACCOUNT USING SIGNUP.JSX PAGE AND IT COMES UNDER PAGES FOLDER)
    STEP-1:
        - Click on the AUTHENTICATION Service option (It comes under BUILD left side menu in your firebase project profile page). to create a new authentication.

    STEP-2:
        - Now, you are into the authentication service profile page and click on the GET STARTED button to create a new authentication.

    STEP-3:
        - Here, you will get a so many of authentication service providers and I'll go with Email/Password Service.

    STEP-4:
        - Click on the Email/Password Service provider and you should enable only the Email/Password Service service provider not a Email Link(Password less sign-in) option. Then click the SAVE button.

    STEP-5:
        - Go to App.js file and update your settings. (TEST CASE CODE)

            // import { getDatabase, ref, set } from "firebase/database";
            import { getAuth, createUserWithEmailAndPassword } from "firebase/auth";
            import { app } from "./firebase";
            import "./App.css";

            // const db = getDatabase(app);

            const auth = getAuth(app);

            function App() {
            // TO STORE A DATA INTO THE DATABASE
            /* const putData = () => {
                set(ref(db, "users/javed"), {
                id: 1,
                name: "Javed Hosamani",
                age: 21,
                });
            }; */

            // TO CREATE A NEW USER
            const signupUser = () => {
                createUserWithEmailAndPassword(auth, "javed@gmail.com", "javed@123").then(
                (value) => console.log(value)
                );
            };

            return (
                <div className="App">
                <h1>Firebase React App</h1>
                {/* <button onClick={putData}>Put Data</button> */}
                <button onClick={signupUser}>Create User</button>
                </div>
            );
            }

            export default App;

        - After updating the App.js file, start the react server and go to the console then click on the Create User button.

        - You will get the entire information about the user(In the console).

        - The same code comes under the Signup.jsx page and is as shown below

            import { createUserWithEmailAndPassword, getAuth } from 'firebase/auth';
            import React, { Fragment, useState } from 'react'
            import { app } from '../firebase';

            const auth = getAuth(app);
            const SignupPage = () => {

                const [email, setEmail] = useState("");
                const [password, setPassword] = useState("");

                const createUser = () =>{
                    createUserWithEmailAndPassword(auth, email, password).then((value)=> alert("Success"));
                }

            return (
                <Fragment>
                    <div className="signup-page">
                    <h1>Signup Page</h1>
                        <label htmlFor="email">Email</label>
                        <input type="email" name="email" id="email" placeholder='Enter your email here' onChange={e=>setEmail(e.target.value)} value={email}/>

                        <label htmlFor="password">Password</label>
                        <input type="password" name="password" id="password" placeholder='Enter your password here' onChange={e=>setPassword(e.target.value)} value={password}/>

                        <button onClick={createUser}>Signup</button>
                    </div>
                </Fragment>
            )
            }

            export default SignupPage;

        - Updated App.js page and is as shown below.
            import { getDatabase, ref, set } from "firebase/database";
            import { app } from "./firebase";
            import "./App.css";
            import SignupPage from "./pages/Signup";

            const db = getDatabase(app);

            function App() {
            // TO STORE A DATA INTO THE DATABASE
            const putData = () => {
                set(ref(db, "users/javed"), {
                id: 1,
                name: "Javed Ali Hosamani",
                age: 21,
                });
            };

            return (
                <div className="App">
                <h1>Firebase React App</h1>
                <button onClick={putData}>Put Data</button>
                <SignupPage />
                </div>
            );
            }

            export default App;


    STEP-6:
        - After the console result, go to the firebase website please check your AUTHENTICATION Service page (It comes under BUILD left side menu in your firebase project profile page).

            -> Below the Authentication (inside the AUTHENTICATION Service page) title will have a Users(First Option) option and click on that.

            -> After that, next to Add User button will have a a refresh icon and click on that. 

            -> It will refresh the Users and display the updated users detail.


CHAPTER-4 : LOGIN WITH FIREBASE AND REACT | FIREBASE AUTHENTICATION (LOGIN ACCOUNT USING SIGNIN.JSX PAGE  AND IT COMES UNDER PAGES FOLDER)
    STEP-1 : 
        - SIGNIN.JSX PAGE CODE
            import React, { Fragment, useState } from 'react'
            import { getAuth, signInWithEmailAndPassword } from 'firebase/auth';
            import { app } from '../firebase';

            const auth = getAuth(app);

            const SigninPage = () => {
                const [email, setEmail] = useState("");
                const [password, setPassword] = useState("");

                const singinUser = () => {
                    signInWithEmailAndPassword(auth, email, password)
                    .then((value)=> alert("SignIn Success"))
                    .catch(error => console.log(error));
            
                }
            return (
                <Fragment>
                    <div className="signin-page">
                    <h1>Signin Page</h1>
                        <label htmlFor="email">Enter your Email</label>
                        <input type="email" name="email" id="email" placeholder='Enter your email here' onChange={e=>setEmail(e.target.value)} value={email}/>

                        <label htmlFor="password">Enter your Password</label>
                        <input type="password" name="password" id="password" placeholder='Enter your password here' onChange={e=>setPassword(e.target.value)} value={password}/>

                        <button onClick={singinUser}>Sign me in</button>
                    </div>
                </Fragment>
            )
            }

            export default SigninPage;

    STEP-2 : 
        - UPDATED APP.JS FILE.

            import { getDatabase, ref, set } from "firebase/database";
            import { app } from "./firebase";
            import "./App.css";
            import SignupPage from "./pages/Signup";
            import SigninPage from "./pages/Signin";

            const db = getDatabase(app);

            function App() {
            // TO STORE A DATA INTO THE DATABASE
            const putData = () => {
                set(ref(db, "users/javed"), {
                id: 1,
                name: "Javed Ali Hosamani",
                age: 21,
                });
            };

            return (
                <div className="App">
                    <h1>Firebase React App</h1>
                    <button onClick={putData}>Put Data</button>
                    <SignupPage />
                    <SigninPage />
                </div>
            );
            }

            export default App;

        - The above code is only for test case and actual code will comes under CHAPTER-5


CHAPTER-5 : CORRECT WAY OF USING FIREBASE IN REACT APPLICATION.
    STEP-1 : 
        - Create a Firebase.jsx file inside the context folder and context folder should in inside the src folder.

        - Firebase.jsx file Code is as shown in the below.

            import { getAuth, createUserWithEmailAndPassword } from 'firebase/auth';
            import React, { createContext, useContext } from 'react'
            import { app } from '../firebase';
            import { getDatabase, ref, set } from 'firebase/database';

            const firebaseAuth = getAuth(app);
            const firebaseDB = getDatabase(app);

            const FirebaseContext = createContext(null);
            export const useFirebase = () => useContext(FirebaseContext);

            const FirebaseProvider = (props) => {
                const signupUserWithEmailAndPassword = (email, password) => {
                    return createUserWithEmailAndPassword(firebaseAuth, email, password);
                }
                const putData = (key, data) => set(ref(firebaseDB, key), data);

            return (
                <FirebaseContext.Provider value={{signupUserWithEmailAndPassword, putData}}>
                    {props.children}
                </FirebaseContext.Provider>
            )
            }

            export default FirebaseProvider;

    STEP-2 : 
        - Create a RealTimeDB.jsx file inside the database folder and update is as shown below.
            import { useState } from "react";
            import "./App.css";
            import { useFirebase } from "./context/Firebase";

            function App() {
            const firebase = useFirebase();
            const [email, setEmail] = useState("");
            const [password, setPassword] = useState("");

            console.log("Firebase", firebase);

            return (
                <div className="App">
                <h1>Firebase React App</h1>
                <input
                    type="email"
                    name="email"
                    id="email"
                    placeholder="Enter Email"
                    onChange={(e) => setEmail(e.target.value)}
                    value={email}
                />
                <input
                    type="password"
                    name="password"
                    id="password"
                    placeholder="Enter password"
                    onChange={(e) => setPassword(e.target.value)}
                    value={password}
                />
                <button
                    onClick={() => {
                    firebase.signupUserWithEmailAndPassword(email, password);
                    firebase.putData("users/manu", { email, password });
                    }}
                >
                    SignUp
                </button>
                </div>
            );
            }

            export default App;

    STEP-3:
        - Updated App.js file code is as shown below.
            import RealTimeDB from "./database/RealTimeDB";
            import "./App.css";

            function App() {
            return (
                <div className="App">
                <RealTimeDB />
                </div>
            );
            }

            export default App;


    STEP-4: 
        - Updated index.js file is as shown in the below.

            import React from "react";
            import ReactDOM from "react-dom/client";
            import "./index.css";
            import App from "./App";
            import reportWebVitals from "./reportWebVitals";
            import FirebaseProvider from "./context/Firebase";

            const root = ReactDOM.createRoot(document.getElementById("root"));
            root.render(
            <React.StrictMode>
                <FirebaseProvider>
                <App />
                </FirebaseProvider>
            </React.StrictMode>
            );

            // If you want to start measuring performance in your app, pass a function
            // to log results (for example: reportWebVitals(console.log))
            // or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
            reportWebVitals();




CHAPTER-6 : FIREBASE GOOGLE AUTHENTICATION REACT
    STEP-1 :
        - Go to FIREBASE AUTHENTICATION Service page and below the Authentication title, will have a 6 options is as shown below.
            -> OPTION-1 : Users
            -> OPTION-2 : Sign-In-Method (Click to Google Authentication)
            -> OPTION-3 : Templates 
            -> OPTION-4 : Usage
            -> OPTION-5 : Settings
            -> OPTION-6 : Extensions

    STEP-2 : 
        - Inside the Sign-In-Method page, click on the ADD NEW PROVIDER button and select the Google.
        
        - You should enabled the Google Provider radio button option and go to the second text field i.e for Support email for project. 
        
        - Inside the second text field, will have an option to select your google mail.
        
        - You should select your Google email and scroll down the page to click on the SAVE button.

    STEP-3 : 
        - Next, go to Signup.jsx (Inside the pages folder) file and update it.
            import { createUserWithEmailAndPassword, getAuth, GoogleAuthProvider, signInWithPopup } from 'firebase/auth';
            import React, { Fragment, useState } from 'react'
            import { app } from '../firebase';

            const auth = getAuth(app);
            const googleProvider = new GoogleAuthProvider();

            const SignupPage = () => {

                const [email, setEmail] = useState("");
                const [password, setPassword] = useState("");

                const createUser = () =>{
                    createUserWithEmailAndPassword(auth, email, password).then((value)=> alert("Success"));
                }

                const signupWithGoogle = () => {
                signInWithPopup(auth, googleProvider);
                }
            return (
                <Fragment>
                    <div className="signup-page">
                    <h1>Signup Page</h1>
                        <label htmlFor="email">Email</label>
                        <input type="email" name="email" id="email" placeholder='Enter your email here' onChange={e=>setEmail(e.target.value)} value={email}/>

                        <label htmlFor="password">Password</label>
                        <input type="password" name="password" id="password" placeholder='Enter your password here' onChange={e=>setPassword(e.target.value)} value={password}/>

                        <br />
                        <button onClick={signupWithGoogle}>Sign In With Google</button>
                        <button onClick={createUser}>Signup</button>
                    </div>
                </Fragment>
            )
            }

            export default SignupPage;

        - SigninPage.jsx file updated code.
            import React, { Fragment, useState } from 'react'
            import { getAuth, signInWithEmailAndPassword } from 'firebase/auth';
            import { app } from '../firebase';

            const auth = getAuth(app);

            const SigninPage = () => {
                const [email, setEmail] = useState("");
                const [password, setPassword] = useState("");

                const singinUser = () => {
                    signInWithEmailAndPassword(auth, email, password)
                    .then((value)=> alert("SignIn Success"))
                    .catch(error => console.log(error));
            
                }
            return (
                <Fragment>
                    <div className="signin-page">
                    <h1>Signin Page</h1>
                        <label htmlFor="email">Enter your Email</label>
                        <input type="email" name="email" id="email" placeholder='Enter your email here' onChange={e=>setEmail(e.target.value)} value={email}/>

                        <label htmlFor="password">Enter your Password</label>
                        <input type="password" name="password" id="password" placeholder='Enter your password here' onChange={e=>setPassword(e.target.value)} value={password}/>

                        <button onClick={singinUser}>Sign me in</button>
                    </div>
                </Fragment>
            )
            }

            export default SigninPage;

        - App.js file updated Code.
            import { useEffect, useState } from "react";
            import "./App.css";
            import SignupPage from "./pages/Signup";
            import SigninPage from "./pages/Signin";
            import { getAuth, onAuthStateChanged, signOut } from "firebase/auth";
            import { app } from "./firebase";

            const auth = getAuth(app);
            function App() {
            const [user, setUser] = useState(null);

            useEffect(() => {
                onAuthStateChanged(auth, (user) => {
                if (user) {
                    setUser(user);
                } else {
                    console.log("You are logged out");
                    setUser(null);
                }
                });
            }, []);
            console.log("User", user);
            if (user === null) {
                return (
                <div className="App">
                    <SignupPage />
                    <SigninPage />
                </div>
                );
            }

            return (
                <div className="App">
                <h1>Hello {user.email}</h1>
                <button
                    onClick={() => {
                    signOut(auth);
                    }}
                >
                    Logout
                </button>
                </div>
            );
            }

            export default App;

    - This Logout button is for Email/Password Text box also.

CHAPTER-7 : GETTING STARTED WITH FIREBASE FIRESTORE
    STEP-1 : 
        - Cloud Firestore is a NoSQL document database that lets you easily store, sync, and query data for your mobile and web apps.

        - Go to FIRESTORE DATABASE Service (It comes under BUILD left side menu in your firebase project profile page) option.

        - You will get a CREATE DATABASE button and click on that to create a cloud base database.

        - When you click on the CREATE DATABASE button, you will get a new popup window.
        
        - If you want to change the location of your database, you can take help from the second option i.e dropdown. Here I'm taking the default one i.e nam5(United States).

        - After the location selection is done please click on the NEXT button.

        - Again you will get a 2 options for security rules.
            1) Start in Production mode (Note : Don't select this one because it won't alow's you to read and write)
            2) Start in Test mode (Note : Select this one because it alow's you to read and write)

        - And then click on the CREATE button to create a new database.

    STEP-2 :
        - Inside the CLOUD FIRETORE page will have an option to create a new collection and click on that.

        - you will get a new popup for to create a new collection and my collection name is users(small letter).

        - You have created a new collection users then click on the NEXT button.

        -  You will get a second option after clicking the NEXT button, in which you click on Auto-ID button for to generate the auto ID for users collection and you should enter the required fields with datatype and value is as shown below.

            field   Type        Value
            --------------------------------
            Name    string      Javed
            Age     number      21
            isMale  boolean     true

        - After entering the fields please click on the SAVE button.

    STEP-3 :
        - You can see the entire details of the users collection in side the FIRESTORE DATABASE service page.

        - You can add few more details to the users by clicking on the ADD DOCUMENT button.(Middle Option) 

        - Again, you have to auto generate the Auto-ID and enter the field details and updated details in the database.

    STEP-4 : 
        - In side the last option you have an option Start Collection. This option is used to define a field as a collection.

        - In the last option, click the "Start Collection" button to create a new collection (Collection inside the collection.) you will get a new popup to create a collection inside the collection is as shown below.

        - Enter the collection name as "purchases" in the text box and click on the next button and result is shown as below.
        
        - /users/53LpHznyACfUqCsWTJvO/purchases - Below this option click on the Auto-ID button to generate a new purchase ID and enter the fields of the purchase option is as shown below.

            /users/53LpHznyACfUqCsWTJvO/purchases
            /users/53LpHznyACfUqCsWTJvO/purchases/6BbnTUsR3VFVlvlwCnJ6 (Auto-ID)

            PURCHASES COLLECTION Fields 

            field   Type        Value
            --------------------------------
            Name    string      Macbook
            Price   number      100000

        - After the field, click on the SAVE button.


CHAPTER-8 : HOW TO UPDATE THE FIRESTORE DATABASE USING REACT APPLICATION.

    STEP-1 : INSERT DATA INTO FIRESTORE.

        - Create a new component(FireStore.jsx) inside the firestore folder and update it is as shown in the below.

        FireStore.jsx file

            import React from 'react';
            import { getFirestore, collection, addDoc, doc, getDoc, query, where, getDocs, updateDoc } from 'firebase/firestore';
            import { app } from '../firebase';

            const firestore = getFirestore(app);

            const FireStore = () => {

                // Create a new collection
                const writeData = async () => {
                    const result = await addDoc(collection(firestore, 'cities'),{
                        name: "Bengaluru",
                        pinCode : 560078,
                        lat : 123,
                        long : 456
                    });
                    console.log("Result = ", result);
                }

                // Create a subCollection 
                const makeSubCollection = async () => {
                    await addDoc(collection(firestore, 'cities/uajzG3qsoOaUUxXja9bf/places'),{
                        name : 'This is a place',
                        desc : 'Awesome desc',
                        date : Date.now()
                    });
                }

                // Read a data from Firestore
                const getDocuments = async () => {
                    const ref =  doc(firestore, 'cities', 'uajzG3qsoOaUUxXja9bf');
                    const snap = await getDoc(ref);
                    console.log("Snap", snap.data());        
                }

                // Get Document by Query
                const getDocumentsByQuery = async () => {
                    const collectionRef = await collection(firestore, 'users');
                    
                    const q = query(collectionRef, where('isMale', "==", true));

                    const snapshot = await getDocs(q);
                    snapshot.forEach((data)=>console.log("getDocumentsByQuery", data.data()))
                }

                // Update Collection
                const update = async () => {
                    const docRef = doc(firestore, 'cities', 'uajzG3qsoOaUUxXja9bf');
                    await updateDoc(docRef, {
                        name : "Mysore",
                    })
                }
            return (
                <div>
                    <center>
                        <h1>FireStore</h1>
                    </center>
                    <hr />

                    <button onClick={writeData}>Put Data</button>
                    <button onClick={makeSubCollection}>Put Sub Data</button>
                    <button onClick={getDocuments}>Get Document</button>
                    <button onClick={getDocumentsByQuery}>Get Documents By Query</button>
                    <button onClick={update}>Update Collection</button>
                </div>
            )
            }

            export default FireStore

    STEP-2 : Update App.js file is as shown below.

        import "./App.css";
        import FireStore from "./fireStore/FireStore";

        function App() {
        return (
            <div className="App">
            <FireStore />
            </div>
        );
        }

        export default App;

    STEP-3 : Refresh your Firestore profile page and you will get a new Collection data.


CHAPTER-9 : HOW TO SETUP REAL TIME DATABASE WITH REACT
    
    STEP-1 : Updated RealTimeDB.jsx (Comes under database folder) file is as shown below 

        import React from 'react'
        import { useFirebase } from '../context/Firebase'
        import { useState } from "react";

        const RealTimeDB = () => {
            const firebase = useFirebase();
            const [email, setEmail] = useState("");
            const [password, setPassword] = useState("");

            console.log("Firebase", firebase);

            // Insert a New Data into the DATABASE
            const putDataNew = () => {
                firebase.putData("grandfather/father/child", {id:1, name:"ganesh", age:21});
            }

            return (
                <div>
                    <h1>Firebase React App</h1>
                    <input
                        type="email"
                        name="email"
                        id="email"
                        placeholder="Enter Email"
                        onChange={(e) => setEmail(e.target.value)}
                        value={email}
                    />
                    <input
                        type="password"
                        name="password"
                        id="password"
                        placeholder="Enter password"
                        onChange={(e) => setPassword(e.target.value)}
                        value={password}
                    />
                    <button
                        onClick={() => {
                            firebase.signupUserWithEmailAndPassword(email, password);
                            firebase.putData("users/manu", { email, password });
                        }}
                        >
                            SignUp
                    </button>
                    <button onClick={putDataNew}>Trigger</button>
                </div>
            )
        }

        export default RealTimeDB

    STEP-2 : Updated Firebase.jsx file (Comes under context folder) is as shown below.

        import { getAuth, createUserWithEmailAndPassword } from 'firebase/auth';
        import React, { createContext, useContext, useEffect, useState } from 'react'
        import { app } from '../firebase';
        import { getDatabase, ref, set, get, child, onValue } from 'firebase/database';

        const firebaseAuth = getAuth(app);
        const firebaseDB = getDatabase(app);

        const FirebaseContext = createContext(null);
        export const useFirebase = () => useContext(FirebaseContext);

        const FirebaseProvider = (props) => {

            const [name, setName] = useState("");

            const signupUserWithEmailAndPassword = (email, password) => {
                return createUserWithEmailAndPassword(firebaseAuth, email, password);
            }
            const putData = (key, data) => set(ref(firebaseDB, key), data);

            // Get the data from Database
            /* get(child(ref(firebaseDB), 'grandfather')).then((snapshot) => {
            console.log('Get Child', snapshot.val());
            });
            get(child(ref(firebaseDB), 'grandfather/father')).then((snapshot) => {
            console.log('Get Child', snapshot.val());
            }); */
            get(child(ref(firebaseDB), 'grandfather/father/child')).then((snapshot) => {
            console.log('Get Child', snapshot.val());
            });

            onValue(ref(firebaseDB, 'grandfather/father/child'), (snapshot) => 
            console.log('Onvalue', snapshot.val())
            );

            useEffect(()=>{
            onValue(ref(firebaseDB, 'grandfather/father/child'), (snapshot) => 
                setName(snapshot.val().name)
            );
            },[]);
        return (
            <FirebaseContext.Provider value={{signupUserWithEmailAndPassword, putData}}>
                <h3>Name is : {name}</h3>
                {props.children}
            </FirebaseContext.Provider>
        )
        }

        export default FirebaseProvider;

    STEP-3 : Updated App.js file is as shown below 

        import RealTimeDB from "./database/RealTimeDB";
        import "./App.css";

        function App() {
        return (
            <div className="App">
            <RealTimeDB />
            </div>
        );
        }

        export default App;

    STEP-4 : Updated index.js file is as shown below.

        import React from "react";
        import ReactDOM from "react-dom/client";
        import "./index.css";
        import App from "./App";
        import reportWebVitals from "./reportWebVitals";
        import FirebaseProvider from "./context/Firebase";

        const root = ReactDOM.createRoot(document.getElementById("root"));
        root.render(
        <React.StrictMode>
            <FirebaseProvider>
            <App />
            </FirebaseProvider>
        </React.StrictMode>
        );

        // If you want to start measuring performance in your app, pass a function
        // to log results (for example: reportWebVitals(console.log))
        // or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
        reportWebVitals();


CHAPTER-10 : FIREBASE REACT PROJECT SETUP | COMPLETE FIREBASE REACT FOR BEGINNER'S 